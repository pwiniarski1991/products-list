import Head from 'next/head'
import dynamic from 'next/dynamic'
import { ChangeEvent, useEffect, useState } from 'react';
import styles from './../styles/Home.module.css';
import { useDebounce } from '../hooks/useDebounce';
import { fetchProducts } from '../helpers/fetchProducts';
import { Product } from '../types/product';

const Modal = dynamic(
  () => import('../components/Modal').then((mod) => mod.Modal),
  // eslint-disable-next-line react/display-name
  { loading: () => <p>loading...</p> }
)

export default function Home() {
  const [products, setProducts] = useState<Product[]>([]);
  const [isVisible, setVisible] = useState(false);
  const [machine, setMachine] = useState('');
  const debouncedValue = useDebounce<string>(machine, 500)
  const onClick = (): void => {
    setVisible(true);
  }

  useEffect(() => {
    fetchProducts(debouncedValue).then(data => {
      setProducts(data);
    })
  }, [debouncedValue]);

  const handleChange = (event: ChangeEvent<HTMLInputElement>) => {
    setMachine(event.target.value)
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      {isVisible ? null : (
        <>
          <header className={styles.header}>
            <h1>klickrent</h1>
          </header>
          <main className={styles.main}>
            <button className={styles.btn} onClick={onClick}>Start inquiry</button>
          </main>
        </>)}
      {isVisible ? (
        <Modal isVisible={isVisible} onDismiss={(): void => setVisible(false)}>
          <div className={styles.modalContainer}>
            <h2>Direct request</h2>
            <input type="search" className={styles.input} aria-label="machine name" onChange={handleChange} placeholder="machine name" />
            <div className={styles.scrollList}>
              {products.map(product => (
                <div key={`${product.familyId}_${product.groupId}`}>
                  <div className={styles.productGroupLabel}>{product.name}</div>
                  <ul className={styles.list}>
                    {product.products.map(innerProduct => (
                      <li className={styles.listItem} key={`${innerProduct.groupId}_${innerProduct.typeId}`}>{innerProduct.name}</li>
                    ))}
                  </ul>
                </div>
              ))}
            </div>
          </div>
        </Modal>
      ) : null}
    </div>
  )
}
